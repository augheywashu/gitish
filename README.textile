h1. Summary

This is called gitish because it is git'ish.  It uses the concepts of
git in the way git stores information, but is geared towards a remote
backup system.

h2. Information

More information on the purpose of the files and the concepts will
come soon.

h1. Usage

The basic command line is...

ruby backup.rb TYPE OPTIONS DIRECTORY

Where TYPE is one of the following:

* local
** The local type is for storing data to your local machine.
* network
** The network type is for sending data to a remote computer over some sort of shell command (typically ssh)
* remote
** The remote type shouldn't actually be specified on the command line, but is used by the remote.rb program to setup a write chain for a remote session.

h2. Examples...

h3. Local backups

This is what I run to backup my computer locally...

ruby backup.rb local "`cat local.options`" $@

Where the local.yaml file contains...

storedir: store-local
cachefile: cache-local.db
crypt_key: abcdefg

The options is a YAML file that is simply loaded passed on to the write chain factory and objects.  If a required option is not specified, the program will abort.

Options are kept in a separate file so that the backup and restore commands can use the same configuration.

h1. Files

This is an attempt to explain what each file does from the top-down.

* backup.rb
** This is the file that can be run from the command line to backup a path 
to the archive system.  It keeps a local cache of files that have been backed
up so that there is as little interaction with the lower level Archive
objects as possible

* backupmanager.rb
** The BackupManager class handles the local logic of figuring out what files
need to be archived and keeping a cache of files that have been archived.  BackupManager
interacts with an Archive object.

* archive.rb
** The archive provides basic methods for reading and writing data.  write_file does
most of the heavy work of taking a file and splitting it into 1MB chunks to be written
to the next level store.

* blobstore.rb
** BlobStore maintains a mapping between shas and lower level storage keys.  It provides
higher level methods such as write_directory that take a list of directories and files
and writes it to the lower level store.  This is mostly a pass-through class, right now.

* datastore.rb
** DataStore is the lowest level storage system that simple takes chunks of data and writes
them to persistant storage.  The write method returns a key that can be used to retrieve that
bit of data.  A read method takes that same key and returns the data that was written.  

* restore.rb
** A simple restore program.

h2. Other Files

* blobstorelocal.rb
** BlobStoreLocal mimicks a BlobStore class but communicates with a corresponding BlobStoreRemote
object through standard stdin/stdout reads and writes.  This is intended to be piped through
a ssh connection or similar communication mechanism (http in work).

* remote.rb
** This file is executable and does the remote side of the local-remote communication channel.

h1. Write Chain

Here is the chain I expect to build.

Archive -> Compress -> Encrypt -> Keyify -> WriteCheck -> STORAGESYSTEM
